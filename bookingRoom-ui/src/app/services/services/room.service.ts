/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRoom } from '../fn/room/add-room';
import { AddRoom$Params } from '../fn/room/add-room';
import { deleteRoom } from '../fn/room/delete-room';
import { DeleteRoom$Params } from '../fn/room/delete-room';
import { getAllRooms } from '../fn/room/get-all-rooms';
import { GetAllRooms$Params } from '../fn/room/get-all-rooms';
import { getAllRoomTypes } from '../fn/room/get-all-room-types';
import { GetAllRoomTypes$Params } from '../fn/room/get-all-room-types';
import { getAvailableRooms } from '../fn/room/get-available-rooms';
import { GetAvailableRooms$Params } from '../fn/room/get-available-rooms';
import { getAvailableRoomsByDateAndType } from '../fn/room/get-available-rooms-by-date-and-type';
import { GetAvailableRoomsByDateAndType$Params } from '../fn/room/get-available-rooms-by-date-and-type';
import { getRoomById } from '../fn/room/get-room-by-id';
import { GetRoomById$Params } from '../fn/room/get-room-by-id';
import { PageResponseRoomResponse } from '../models/page-response-room-response';
import { RoomResponse } from '../models/room-response';
import { updateRoom } from '../fn/room/update-room';
import { UpdateRoom$Params } from '../fn/room/update-room';

@Injectable({ providedIn: 'root' })
export class RoomService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRoom()` */
  static readonly UpdateRoomPath = '/room/update/{room-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRoom$Response(params: UpdateRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRoom(params: UpdateRoom$Params, context?: HttpContext): Observable<void> {
    return this.updateRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addRoom()` */
  static readonly AddRoomPath = '/room/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  addRoom$Response(params: AddRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addRoom(params: AddRoom$Params, context?: HttpContext): Observable<number> {
    return this.addRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getAllRoomTypes()` */
  static readonly GetAllRoomTypesPath = '/room/types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRoomTypes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRoomTypes$Response(params?: GetAllRoomTypes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllRoomTypes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRoomTypes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRoomTypes(params?: GetAllRoomTypes$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllRoomTypes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getAvailableRooms()` */
  static readonly GetAvailableRoomsPath = '/room/list-available-rooms';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvailableRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRooms$Response(params?: GetAvailableRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRoomResponse>> {
    return getAvailableRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvailableRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRooms(params?: GetAvailableRooms$Params, context?: HttpContext): Observable<PageResponseRoomResponse> {
    return this.getAvailableRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRoomResponse>): PageResponseRoomResponse => r.body)
    );
  }

  /** Path part for operation `getRoomById()` */
  static readonly GetRoomByIdPath = '/room/get-room-by-id/{room-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoomById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomById$Response(params: GetRoomById$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomResponse>> {
    return getRoomById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoomById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomById(params: GetRoomById$Params, context?: HttpContext): Observable<RoomResponse> {
    return this.getRoomById$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomResponse>): RoomResponse => r.body)
    );
  }

  /** Path part for operation `getAvailableRoomsByDateAndType()` */
  static readonly GetAvailableRoomsByDateAndTypePath = '/room/available-rooms-by-and-type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvailableRoomsByDateAndType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRoomsByDateAndType$Response(params?: GetAvailableRoomsByDateAndType$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRoomResponse>> {
    return getAvailableRoomsByDateAndType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvailableRoomsByDateAndType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRoomsByDateAndType(params?: GetAvailableRoomsByDateAndType$Params, context?: HttpContext): Observable<PageResponseRoomResponse> {
    return this.getAvailableRoomsByDateAndType$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRoomResponse>): PageResponseRoomResponse => r.body)
    );
  }

  /** Path part for operation `getAllRooms()` */
  static readonly GetAllRoomsPath = '/room/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRooms$Response(params?: GetAllRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseRoomResponse>> {
    return getAllRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRooms(params?: GetAllRooms$Params, context?: HttpContext): Observable<PageResponseRoomResponse> {
    return this.getAllRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseRoomResponse>): PageResponseRoomResponse => r.body)
    );
  }

  /** Path part for operation `deleteRoom()` */
  static readonly DeleteRoomPath = '/room/delete/{room-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoom$Response(params: DeleteRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoom(params: DeleteRoom$Params, context?: HttpContext): Observable<void> {
    return this.deleteRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
