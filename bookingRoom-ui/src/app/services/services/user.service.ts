/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignAdminRole } from '../fn/user/assign-admin-role';
import { AssignAdminRole$Params } from '../fn/user/assign-admin-role';
import { assignManagerRole } from '../fn/user/assign-manager-role';
import { AssignManagerRole$Params } from '../fn/user/assign-manager-role';
import { deleteUser } from '../fn/user/delete-user';
import { DeleteUser$Params } from '../fn/user/delete-user';
import { getAllUsers } from '../fn/user/get-all-users';
import { GetAllUsers$Params } from '../fn/user/get-all-users';
import { getLoggedUserProfile } from '../fn/user/get-logged-user-profile';
import { GetLoggedUserProfile$Params } from '../fn/user/get-logged-user-profile';
import { getUserById } from '../fn/user/get-user-by-id';
import { GetUserById$Params } from '../fn/user/get-user-by-id';
import { ResponseUser } from '../models/response-user';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `assignManagerRole()` */
  static readonly AssignManagerRolePath = '/user/assign-manager-role/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignManagerRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignManagerRole$Response(params: AssignManagerRole$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return assignManagerRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignManagerRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignManagerRole(params: AssignManagerRole$Params, context?: HttpContext): Observable<User> {
    return this.assignManagerRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `assignAdminRole()` */
  static readonly AssignAdminRolePath = '/user/assign-admin-role/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignAdminRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignAdminRole$Response(params: AssignAdminRole$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return assignAdminRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignAdminRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignAdminRole(params: AssignAdminRole$Params, context?: HttpContext): Observable<User> {
    return this.assignAdminRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `getUserById()` */
  static readonly GetUserByIdPath = '/user/get-user-by-id/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Response(params: GetUserById$Params, context?: HttpContext): Observable<StrictHttpResponse<ResponseUser>> {
    return getUserById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById(params: GetUserById$Params, context?: HttpContext): Observable<ResponseUser> {
    return this.getUserById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResponseUser>): ResponseUser => r.body)
    );
  }

  /** Path part for operation `getLoggedUserProfile()` */
  static readonly GetLoggedUserProfilePath = '/user/get-logged-in-profile-info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLoggedUserProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLoggedUserProfile$Response(params?: GetLoggedUserProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<ResponseUser>> {
    return getLoggedUserProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLoggedUserProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLoggedUserProfile(params?: GetLoggedUserProfile$Params, context?: HttpContext): Observable<ResponseUser> {
    return this.getLoggedUserProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResponseUser>): ResponseUser => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/user/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ResponseUser>>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<ResponseUser>> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ResponseUser>>): Array<ResponseUser> => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/user/delete/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<void> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
